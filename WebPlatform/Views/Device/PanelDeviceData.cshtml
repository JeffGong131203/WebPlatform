
@{
    ViewBag.Title = "空调面板";
    Layout = null;

    string[] statusName = new string[] { "关", "开", "防冻启动" };
    string[] modeName = new string[] { "","制冷","制热","通风"};
    string[] fanModeName = new string[] { "自动","高速","中速","低速"};


    Guid devID = ViewBag.DevID;
    System.Collections.ArrayList retArray = ViewBag.retArray;
    System.Collections.ArrayList dataList = ViewBag.dataList;

    WebPlatform.Models.WebPlatformContext db = new WebPlatform.Models.WebPlatformContext();

    WebPlatform.Models.Device_Info devInfo = db.Device_Info.Find(devID);

    Dictionary<string, string> devDic = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, string>>(devInfo.PropertyJson);

    //实时数据处理
    string setTmp = string.Empty;
    string panelTmp = string.Empty;
    string statusCode = string.Empty;
    string modeCode = string.Empty;
    string fanModeCode = string.Empty;

    if (retArray.Count > 0)
    {
        statusCode = retArray[0].ToString();
        modeCode = retArray[1].ToString();
        setTmp = retArray[2].ToString();
        fanModeCode = retArray[3].ToString();
        panelTmp = retArray[6].ToString();
    }

    //图表数据处理
    string[] tmpList = new string[dataList.Count];
    string[] dateList = new string[dataList.Count];

    if (dataList.Count <= 50)
    {
        for (int i = dataList.Count - 1; i >= 0; i--)
        {
            System.Collections.ArrayList arr = (System.Collections.ArrayList)dataList[i];

            if (arr.Count > 6)
            {
                dateList[i] = arr[0].ToString();
                tmpList[i] = arr[7].ToString();
            }
        }
    }
    else
    {
        for (int i = 49; i >= 0; i--)
        {
            System.Collections.ArrayList arr = (System.Collections.ArrayList)dataList[i];

            if (arr.Count > 6)
            {
                dateList[i] = arr[0].ToString();
                tmpList[i] = arr[7].ToString();
            }
        }
    }

    string panelDateJson = Newtonsoft.Json.JsonConvert.SerializeObject(dateList, Newtonsoft.Json.Formatting.Indented);
    string panelTmpJson = Newtonsoft.Json.JsonConvert.SerializeObject(tmpList, Newtonsoft.Json.Formatting.Indented);
}

<h1>
    空调面板
    <small>@devDic["DevCusName"]</small>
</h1>
@*<div class="row">
    <div class="col-sm-1">
        <a href="@Url.Action("List","Device",new { DevType = "panel"})"><button type="button" class="btn btn-block btn-info">返回</button></a>
    </div>
</div>
<br />
<br />*@
<!-- Small boxes (Stat box) -->
<div class="row">
    <div class="col-lg-3 col-xs-6">
        <!-- small box -->
        <div class="small-box bg-yellow">
            <div class="inner">
                <h3>@setTmp</h3>
                <p>设置温度</p>
            </div>
            <div class="icon">
                <i class="ion ion-bag"></i>
            </div>
            @*<a href="#" class="small-box-footer"> <i class="fa fa-arrow-circle-right"></i></a>*@
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-xs-6">
        <!-- small box -->
        <div class="small-box bg-green">
            <div class="inner">
                <h3>@panelTmp</h3>
                <p>室内温度</p>
            </div>
            <div class="icon">
                <i class="ion ion-stats-bars"></i>
            </div>
            @*<a href="#" class="small-box-footer"><i class="fa fa-arrow-circle-right"></i></a>*@
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-xs-6">
        <!-- small box -->
        <div class="small-box bg-aqua">
            <div class="inner">
                <h3>@statusName[int.Parse(statusCode)]</h3>
                <p>状态</p>
            </div>
            <div class="icon">
                <i class="ion ion-waterdrop"></i>
            </div>
            @*<a href="#" class="small-box-footer"><i class="fa fa-arrow-circle-right"></i></a>*@
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-xs-6">
        <!-- small box -->
        <div class="small-box bg-purple">
            <div class="inner">
                <h3>@modeName[int.Parse(modeCode)]</h3>
                <p>模式</p>
            </div>
            <div class="icon">
                <i class="ion ion-pie-graph"></i>
            </div>
            @*<a href="#" class="small-box-footer"> <i class="fa fa-arrow-circle-right"></i></a>*@
        </div>
    </div>
    <!-- ./col -->
    <!-- ./col -->
    <div class="col-lg-3 col-xs-6">
        <!-- small box -->
        <div class="small-box bg-red">
            <div class="inner">
                <h3>@fanModeName[int.Parse(fanModeCode)]</h3>
                <p>风机模式</p>
            </div>
            <div class="icon">
                <i class="ion ion-pie-graph"></i>
            </div>
            @*<a href="#" class="small-box-footer"> <i class="fa fa-arrow-circle-right"></i></a>*@
        </div>
    </div>
    <!-- ./col -->
</div>


<div class="row">
    <div class="col-md-12">
        <!-- LINE CHART -->
        <div class="box box-info">
            <div class="box-header with-border">
                <h3 class="box-title">室内温度</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                </div>
            </div>
            <div class="box-body">
                <div class="chart">
                    <canvas id="panelTmpChart" style="height:500px"></canvas>
                </div>
            </div>
            <!-- /.box-body -->
        </div>
    </div>
</div>

<script>
    $(function () {
        //-------------------
        //- Line CHART 温度 -
        //-------------------

        var panelAreaChartOptions = {
            //Boolean - If we should show the scale at all
            showScale: true,
            //Boolean - Whether grid lines are shown across the chart
            scaleShowGridLines: false,
            //String - Colour of the grid lines
            scaleGridLineColor: 'rgba(0,0,0,.05)',
            //Number - Width of the grid lines
            scaleGridLineWidth: 1,
            //Boolean - Whether to show horizontal lines (except X axis)
            scaleShowHorizontalLines: true,
            //Boolean - Whether to show vertical lines (except Y axis)
            scaleShowVerticalLines: true,
            //Boolean - Whether the line is curved between points
            bezierCurve: true,
            //Number - Tension of the bezier curve between points
            bezierCurveTension: 0.3,
            //Boolean - Whether to show a dot for each point
            pointDot: false,
            //Number - Radius of each point dot in pixels
            pointDotRadius: 4,
            //Number - Pixel width of point dot stroke
            pointDotStrokeWidth: 1,
            //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
            pointHitDetectionRadius: 20,
            //Boolean - Whether to show a stroke for datasets
            datasetStroke: true,
            //Number - Pixel width of dataset stroke
            datasetStrokeWidth: 2,
            //Boolean - Whether to fill the dataset with a color
            datasetFill: true,
            //String - A legend template
            legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].lineColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
            //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true
        }

        var panelTmpChartData = {
            labels: @Html.Raw(panelDateJson),
            datasets: [
                {
                    label: '温度',
                    fillColor: 'rgba(210, 214, 222, 1)',
                    strokeColor: 'rgba(210, 214, 222, 1)',
                    pointColor: 'rgba(210, 214, 222, 1)',
                    pointStrokeColor: '#c1c7d1',
                    pointHighlightFill: '#fff',
                    pointHighlightStroke: 'rgba(220,220,220,1)',
                    data: @Html.Raw(panelTmpJson)
                }
            ]
        }


        var panelTmpChartCanvas = $('#panelTmpChart').get(0).getContext('2d')
        var panelTmpChart = new Chart(panelTmpChartCanvas)
        var panelTmpChartOptions = panelAreaChartOptions
        panelTmpChartOptions.datasetFill = false
        panelTmpChart.Line(panelTmpChartData, panelTmpChartOptions)
    })    
</script>